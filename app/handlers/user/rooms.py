"""Rooms handlers"""
from typing import Optional
from aiogram import Router, types, Bot
from aiogram.filters import Text, Command, StateFilter
from aiogram.fsm.context import FSMContext

from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession

from settings import CHANGE_NICKNAME_IN_ROOM_PRICE
from app.templates import texts
from app.templates.keyboards import user as nav
from app.database.models import User, Room
from app.filters import InRoom


async def room_list(message: types.Message, session: AsyncSession):
    """Room list handler"""
    rooms = await session.scalars(
        select(Room)
    )

    await message.answer(
        'üè† –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç:',
        reply_markup=nav.inline.room_list(rooms),
    )


async def join_room(
    call: types.CallbackQuery, session: AsyncSession, bot: Bot, user: User
) -> bool | None:
    """Join room handler"""
    room_id = int(call.data.split(':')[-1])
    room: Optional[Room] = await session.scalar(
        select(Room)
        .where(Room.id == room_id)
    )

    if not room:
        return await call.answer(
            '–¢–∞–∫–æ–∏ÃÜ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.',
            show_alert=True
        )

    if user.in_room == room_id:
        return await call.answer(
            '–í—ã —É–∂–µ —É–∂–µ –≤ –¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ.',
            show_alert=True
        )

    if user.in_room != 0:
        return await call.answer(
            '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–π–¥–∏—Ç–µ –∏–∑ '
            '—Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã.',
            show_alert=True
        )

    if room.room_online_members >= room.room_online_limit:
        return await call.answer(
            '–ö–æ–º–Ω–∞—Ç–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞.',
            show_alert=True
        )

    user.in_room = room_id
    nickname: str = room.join_room(user.id, user.is_man)
    room.room_online_members += 1
    await session.commit()
    await call.message.delete()
    await bot.send_message(
        user.id,
        texts.user.JOIN_ROOM % (
            room.room_name,
            nickname,
            room.room_online_members
        ),
        reply_markup=nav.reply.ROOM_MENU
    )

    online_users: list = room.get_online_members()
    for online_user in online_users:

        try:
            await bot.send_message(
                online_user,
                'üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>%s</code> –≤–æ—à–µ–ª –≤ –∫–æ–º–Ω–∞—Ç—É!' % (nickname)
            )
        except Exception:
            pass


async def room_members(
    message: types.Message,
    session: AsyncSession,
    user: User
) -> bool | None:
    """Room members handler"""
    if user.in_room == 0:
        return await message.answer(
            '–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ.',
        )

    room = await session.scalar(
        select(Room)
        .where(Room.id == user.in_room)
    )

    if not room:
        await message.answer(
            '–¢–∞–∫–æ–∏ÃÜ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.',
            reply_markup=nav.reply.main_menu(user),
        )

        user.in_room = 0
        return await session.commit()

    room_members: list = room.get_online_members_nickname()
    await message.answer(
        'üë• <b>–ö–æ–º–Ω–∞—Ç–∞ %s —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:</b> %s' % (
            room.room_name, ', '.join(room_members)),
    )


async def leave_room(
    message: types.Message,
    session: AsyncSession,
    bot: Bot,
    user: User
) -> bool | None:
    """Leave room handler"""

    if user.in_room == 0:
        return await message.answer(
            '–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ.',
        )

    room = await session.scalar(
        select(Room)
        .where(Room.id == user.in_room)
    )

    user.in_room = 0
    if not room:
        await message.answer(
            '–¢–∞–∫–æ–∏ÃÜ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.',
            reply_markup=nav.reply.main_menu(user),
        )

        return await session.commit()

    room.leave_room(user.id)
    room.room_online_members -= 1
    await session.commit()
    await message.answer(
        '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã %s.' % room.room_name,
        reply_markup=nav.reply.main_menu(user),
    )

    online_users: list = room.get_online_members()
    nickname: str = room.get_nickname(user.id)

    for online_user in online_users:
        try:
            await bot.send_message(
                online_user,
                'üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>%s</code> –≤—ã—à–µ–ª –∏–∑ –∫–æ–º–Ω–∞—Ç—ã!' % (
                    nickname
                )
            )
        except Exception:
            pass


async def pre_change_nickname(
    message: types.Message, session: AsyncSession, user: User
) -> bool | None:
    """Pre change nickname handler"""
    room: Room = await session.scalar(
        select(Room)
        .where(Room.id == user.in_room)
    )

    nickname: str = room.get_nickname(user.id)

    await message.answer(
        texts.user.PRE_ROOM_CHANGE_NICKNAME % (
            room.room_name,
            nickname,
            int(CHANGE_NICKNAME_IN_ROOM_PRICE),
            user.balance),
        reply_markup=nav.inline.PRE_CHANGE_NICKNAME,
    )


async def change_nickname(
    call: types.CallbackQuery, state: FSMContext, user: User
) -> bool | None:
    """Change nickname handler"""
    user.balance -= CHANGE_NICKNAME_IN_ROOM_PRICE
    if user.balance < 0:
        return await call.message.edit_text(
            '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.',
        )

    if user.in_room == 0:
        return await call.message.edit_text(
            '–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ.',
        )

    await call.message.edit_text(
        '‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–∏ÃÜ–º.',
    )
    await state.set_state('change.nickname')


async def new_change_nickname(
    message: types.Message,
    state: FSMContext,
    session: AsyncSession,
    user: User
) -> bool | None:
    """New change nickname handler"""
    room: Optional[Room] = await session.scalar(
        select(Room)
        .where(Room.id == user.in_room)
    )

    if not room:
        await message.answer(
            '–¢–∞–∫–æ–∏ÃÜ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.',
            reply_markup=nav.reply.main_menu(user),
        )

        user.in_room = 0
        await session.commit()
        return await state.clear()

    if user.in_room == 0:
        await message.answer('–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ.')
        return await state.clear()

    new_nickname: str = message.text

    if len(new_nickname) > 10:
        return await message.answer(
            '–ù–∏–∫–Ω–µ–∏ÃÜ–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.',
        )

    if len(new_nickname) < 3:
        return await message.answer(
            '–ù–∏–∫–Ω–µ–∏ÃÜ–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.'
        )

    nicknames: list = room.get_online_members_nickname()
    old_nickname: str = room.get_nickname(user.id)

    if new_nickname in nicknames:
        return await message.answer(
            '–¢–∞–∫–æ–∏ÃÜ –Ω–∏–∫–Ω–µ–∏ÃÜ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.',
        )

    await state.clear()
    await message.answer(
        texts.user.ROOM_CHANGE_NICKNAME % (
            room.room_name,
            old_nickname,
            new_nickname,
            int(CHANGE_NICKNAME_IN_ROOM_PRICE),
            user.balance),
        reply_markup=nav.inline.change_nickname(new_nickname),
    )


async def accept_change_nickname(
    call: types.CallbackQuery, session: AsyncSession, bot: Bot, user: User
) -> bool | None:
    """Accept change nickname handler"""
    room: Optional[Room] = await session.scalar(
        select(Room)
        .where(Room.id == user.in_room)
    )

    if not room:
        await call.message.edit_text(
            '–¢–∞–∫–æ–∏ÃÜ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.',
            reply_markup=nav.reply.main_menu(user),
        )
        user.in_room = 0
        return await session.commit()

    if user.in_room == 0:
        return await call.message.edit_text('–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ.')

    new_nickname: str = call.data.split(':')[-1]
    old_nickname: str = room.get_nickname(user.id)

    user.balance -= CHANGE_NICKNAME_IN_ROOM_PRICE

    if user.balance < 0:
        return await call.message.edit_text(
            '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.',
        )

    room.change_nickname(user.id, new_nickname)
    await session.commit()
    await call.message.edit_text(
        'üîÑ –ù–∏–∫–Ω–µ–∏ÃÜ–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ %s.' % new_nickname,
    )

    room_online_members: list = room.get_online_members()
    for member in room_online_members:
        if member != user.id:
            await bot.send_message(
                member,
                'üîÑ <code>%s</code> —Å–º–µ–Ω–∏–ª –Ω–∏–∫–Ω–µ–π–º –Ω–∞ <code>%s</code>.' % (
                    old_nickname, new_nickname)
            )


async def decline_change_nickname(
    call: types.CallbackQuery,
    state: FSMContext,
    session: AsyncSession,
    user: User
) -> bool | None:
    """Decline change nickname handler"""

    room: Optional[Room] = await session.scalar(
        select(Room)
        .where(Room.id == user.in_room)
    )

    if not room:
        await call.message.edit_text(
            '–¢–∞–∫–æ–∏ÃÜ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.',
            reply_markup=nav.reply.main_menu(user),
        )

        user.in_room = 0
        return await session.commit()

    if user.in_room == 0:
        return await call.message.edit_text('–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ.')

    await state.clear()
    await call.message.edit_text('üîÑ –î–µ–∏ÃÜ—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')


async def chatting(
    message: types.Message,
    session: AsyncSession,
    bot: Bot,
    user: User
) -> bool | None:
    """Chatting handler"""

    if user.in_room == 0:
        return await message.answer('–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ.',)

    room = await session.scalar(
        select(Room)
        .where(Room.id == user.in_room)
    )

    if not room:
        await message.answer(
            'üè† –ö–æ–º–Ω–∞—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.',
            reply_markup=nav.reply.main_menu(user),
        )

        user.in_room = 0
        await session.commit()
        return

    online_users: list = room.get_online_members()
    nickname: str = room.get_nickname(user.id)

    for online_user in online_users:
        if online_user != user.id:
            try:
                if message.text is not None:
                    await bot.send_message(
                        online_user,
                        '<b>%s</b>: %s' % (nickname, message.text)
                    )
                else:
                    await bot.send_photo(
                        online_user,
                        message.photo[-1].file_id,
                        caption='<b>%s</b>: %s' % (
                            nickname,
                            message.caption or '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è'
                        ),
                    )
            except Exception:
                pass


def register(router: Router):
    """Register handlers"""
    router.message.register(room_list, Text("–ö–æ–º–Ω–∞—Ç—ã üè†"))
    router.message.register(leave_room, Text("–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã üö™"))
    router.message.register(leave_room, Command('leave'))
    router.message.register(room_members, Command('members'))
    router.message.register(room_members, Text("–£—á–∞—Å—Ç–Ω–∏–∫–∏ üë§"))
    router.message.register(pre_change_nickname,
                            Text("–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –≤ –∫–æ–º–Ω–∞—Ç–µ üîÑ"))
    router.callback_query.register(change_nickname, Text('change:nickname'))
    router.message.register(new_change_nickname,
                            StateFilter('change.nickname'))
    router.callback_query.register(
        accept_change_nickname, Text(startswith='accept:change:nickname'))
    router.callback_query.register(
        decline_change_nickname, Text('decline:change:nickname'))
    router.callback_query.register(join_room, Text(startswith='join:room'))
    router.message.register(chatting, InRoom())
